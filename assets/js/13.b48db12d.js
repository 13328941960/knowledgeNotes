(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{116:function(t,a,e){"use strict";e.r(a);var s=e(0),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"资源解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源解析"}},[t._v("#")]),t._v(" 资源解析")]),t._v(" "),e("p",[t._v("通过网络请求获取到资源后，如果该资源响应头中的 "),e("code",[t._v("Content-type")]),t._v(" 是 "),e("code",[t._v("text/html")]),t._v("，\n那么接下来就要进入"),e("code",[t._v("解析")]),t._v("和"),e("code",[t._v("渲染")]),t._v("的过程。")]),t._v(" "),e("p",[t._v("本节主要讲解资源解析的过程，分为三部：")]),t._v(" "),e("ol",[e("li",[t._v("构建DOM树")]),t._v(" "),e("li",[t._v("样式计算")]),t._v(" "),e("li",[t._v("生成布局树")])]),t._v(" "),e("h2",{attrs:{id:"构建dom树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树"}},[t._v("#")]),t._v(" 构建DOM树")]),t._v(" "),e("p",[t._v("由于浏览器无法识别"),e("code",[t._v("HTML")]),t._v("代码，所以需要通过一系列的字节流转换为一种有意义并且方便操作的数据结构。\n这种数据结构就是"),e("code",[t._v("DOM树")]),t._v("。DOM树的本质就是以document为根节点的多叉树。")]),t._v(" "),e("p",[t._v("那么通过什么样的转换呢？")]),t._v(" "),e("h3",{attrs:{id:"html文法本质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html文法本质"}},[t._v("#")]),t._v(" HTML文法本质")]),t._v(" "),e("p",[t._v("首先，先说一下。"),e("code",[t._v("HTML")]),t._v("的文法是非上下文无关文法的。")]),t._v(" "),e("p",[t._v("什么是上下文无关文法？")]),t._v(" "),e("p",[t._v("在计算机科学的编译原理学科中，有非常明确的定义:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("若一个形式文法G = (N, Σ, P, S) 的产生式规则都取如下的形式：V->w，则叫上下文无关语法。其中 V∈N ，w∈(N∪Σ)* 。\n")])])]),e("ol",[e("li",[t._v("N 是非终结符(顾名思义，就是说最后一个符号不是它, 下面同理)集合。")]),t._v(" "),e("li",[t._v("Σ 是终结符集合。")]),t._v(" "),e("li",[t._v("P 是开始符，它必须属于 N ，也就是非终结符。")]),t._v(" "),e("li",[t._v("S 就是不同的产生式的集合。如 S -> aSb 等等。")])]),t._v(" "),e("p",[t._v("关于"),e("code",[t._v("HTML")]),t._v("为什么是非上下文无关文法。举个例子：")]),t._v(" "),e("p",[t._v("比如解析器扫描到"),e("code",[t._v("form")]),t._v("标签，"),e("strong",[t._v("上下文无法文法")]),t._v("的处理方式是：直接创建DOM对象。\n而实际场景并不是这样，解析器会查看"),e("code",[t._v("form")]),t._v("的上下文，如果"),e("code",[t._v("form")]),t._v("这个标签外层还有一个"),e("code",[t._v("form")]),t._v("标签会忽略这个标签，否则才创建DOM对象。")]),t._v(" "),e("h2",{attrs:{id:"解析算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析算法"}},[t._v("#")]),t._v(" 解析算法")]),t._v(" "),e("p",[t._v("HTML的解析算法分别两步：")]),t._v(" "),e("ol",[e("li",[t._v("标记化")]),t._v(" "),e("li",[t._v("建树")])]),t._v(" "),e("p",[t._v("这两个过程可以比作"),e("code",[t._v("词法分析")]),t._v("和"),e("code",[t._v("语法分析")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"标记化算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标记化算法"}},[t._v("#")]),t._v(" 标记化算法")]),t._v(" "),e("p",[t._v("这个算法输入是"),e("code",[t._v("HTML")]),t._v("文本，输出"),e("code",[t._v("HTML")]),t._v("标记，也称作"),e("strong",[t._v("标记生成器")]),t._v("。其中运用"),e("strong",[t._v("有限状态机")]),t._v("即在当前状态下，接收一个或多个字符，就会更新下一个状态。")]),t._v(" "),e("p",[t._v("举个简单的例子来看下标记生成的过程：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<html>\n  <body>\n    yeah, html\n  </body>\n</html>\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n通过一个简单的例子来演示一下标记化的过程。\n\n遇到<, 状态为标记打开。\n\n接收[a-z]的字符，会进入标记名称状态。\n\n这个状态一直保持，直到遇到>，表示标记名称记录完成，这时候变为数据状态。\n\n接下来遇到body标签做同样的处理。\n\n这个时候html和body的标记都记录好了。\n\n现在来到<body>中的>，进入数据状态，之后保持这样状态接收后面的字符yeah, html\n\n接着接收 </body> 中的<，回到标记打开, 接收下一个/后，这时候会创建一个end tag的token。\n\n随后进入**标记名称状态**, 遇到>回到**数据状态**。\n\n接着以同样的样式处理 </html>\n")])])]),e("h3",{attrs:{id:"建树算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#建树算法"}},[t._v("#")]),t._v(" 建树算法")]),t._v(" "),e("p",[t._v("DOM 树是一个以document为根节点的多叉树，因此解析器首先会创建一个document对象。\n标记生成器会把每个标记的信息发送给建树器。\n建树器接收到相应的标记时，会创建对应的 DOM 对象。\n创建这个DOM对象后会做两件事情:")]),t._v(" "),e("ol",[e("li",[t._v("将DOM对象加入DOM树中")]),t._v(" "),e("li",[t._v("将对应的标签压入存储开放元素的栈中")])]),t._v(" "),e("p",[t._v("还是拿下面这个例子说:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<html>\n  <body>\n    yeah, html\n  </body>\n</html>\n")])])]),e("p",[t._v("首先，状态为初始化状态。")]),t._v(" "),e("p",[t._v("接收到标记生成器传来的html标签，这时候状态变为before html状态。同时创建一个HTMLHtmlElement的 DOM 元素, 将其加到document根对象上，并进行压栈操作。")]),t._v(" "),e("p",[t._v("接着状态自动变为before head, 此时从标记生成器那边传来body，表示并没有head, 这时候建树器会自动创建一个HTMLHeadElement并将其加入到DOM树中。")]),t._v(" "),e("p",[t._v("现在进入到in head状态, 然后直接跳到after head。")]),t._v(" "),e("p",[t._v("现在标记生成器传来了body标记，创建HTMLBodyElement, 插入到DOM树中，同时压入开放标记栈。")]),t._v(" "),e("p",[t._v("接着状态变为in body，然后来接收后面一系列的字符: yeah, html。接收到第一个字符的时候，会创建一个Text节点并把字符插入其中，然后把Text节点插入到 DOM 树中body元素的下面。随着不断接收后面的字符，这些字符会附在Text节点上。")]),t._v(" "),e("p",[t._v("现在，标记生成器传过来一个body的结束标记，进入到after body状态。")]),t._v(" "),e("p",[t._v("标记生成器最后传过来一个html的结束标记, 进入到after after body的状态，表示解析过程到此结束。")]),t._v(" "),e("h3",{attrs:{id:"容错机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容错机制"}},[t._v("#")]),t._v(" 容错机制")]),t._v(" "),e("p",[t._v("HTML规范有很强大的宽容策略，接下来来看下 webkit一些经典的容错案例：")]),t._v(" "),e("ol",[e("li",[t._v("使用"),e("br"),t._v("而不是"),e("br")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isCloseTag")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("brTag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" m_document"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inCompatMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reportError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MalformedBRError"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("beginTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("全部换为"),e("br"),t._v("的形式。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("表格")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<table>\n  <table>\n    <tr><td>inner table</td></tr>\n  </table>\n  <tr><td>outer table</td></tr>\n</table>\n")])])]),e("p",[t._v("转成")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<table>\n    <tr><td>outer table</td></tr>\n</table>\n<table>\n    <tr><td>inner table</td></tr>\n</table>\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("表单元素嵌套")])]),t._v(" "),e("p",[t._v("这时候直接忽略里面的form。")]),t._v(" "),e("h2",{attrs:{id:"样式计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[t._v("#")]),t._v(" 样式计算")]),t._v(" "),e("p",[t._v("样式的计算就是css的计算。由于浏览器无法直接识别css文本样式，所以渲染引擎要先进行解析计算。")]),t._v(" "),e("p",[t._v("这个过程分为三步：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("将css样式转成结构化的对象，即styleSheets，可以通过控制台document.styleSheets来查看。这个过程称为规则化样式表。")])]),t._v(" "),e("li",[e("p",[t._v("将一些浏览器不好识别样式数值标准化，比如：red => #00fff, bold => 700, em => px;")])]),t._v(" "),e("li",[e("p",[t._v("计算每个具体节点的样式：前面两步已经将样式规则化以及标准化，接下来就可以计算每个节点的具体样式信息了。")]),t._v(" "),e("p",[t._v("计算的规则就两种（1）继承（2）层叠")]),t._v(" "),e("p",[t._v("每个子节点都会继承父节点的样式，如果没有父节点的样式，则会继承浏览器默认的样式即userAgent。这就是继承的规则。")]),t._v(" "),e("p",[t._v("层叠的规则就是综合各个样式属性最后得到的结果。")]),t._v(" "),e("p",[t._v("在计算后样式后，会将所有的样式值挂到document.compuedStyles上，这样JS就可以直接获取样式了。")])])]),t._v(" "),e("h2",{attrs:{id:"生成布局树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成布局树"}},[t._v("#")]),t._v(" 生成布局树")]),t._v(" "),e("p",[t._v("前面已经生成"),e("code",[t._v("DOM树")]),t._v("和"),e("code",[t._v("DOM样式")]),t._v("，接下来就可以开始通过浏览器的布局系统"),e("code",[t._v("确定元素的位置")]),t._v("，也就是生成一棵"),e("code",[t._v("布局树")]),t._v("。")]),t._v(" "),e("p",[t._v("生成"),e("code",[t._v("布局树")]),t._v("的过程有两步：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("将DOM树节点添加到布局树中")])]),t._v(" "),e("li",[e("p",[t._v("计算布局树节点的位置。")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);