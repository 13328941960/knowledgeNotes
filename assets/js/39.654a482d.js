(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{229:function(e,n,s){"use strict";s.r(n);var l=s(6),t=Object(l.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"webpack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("公共配置\nentry: 配置入口文件，这里可配置多个入口\nouput: 配置构建输入文件出口，生产中需要在后缀加上contextHash\nmodule: rules下面配置loader包括：\n（1）css相关的loader: css-loader/style-loader/postcss-loader/less-loader,\n（2）静态图片资源: 使用url-loader加载静态文件图片或字体, 可以设置图片在多少kb以下转base64的loader，超过的就使用file-loader\n（3）babel-loader：用于将jsx或者es6以上的代码编译成可运行的js。在.babelrc.js中配置，配合ts/env/react预设包\nplugins: 配置要用的插件\n（1）clean：重新构建时，清空dist包使用Clean插件\n（2）html：处理html文件时，使用html插件\n（3）copy: 打包时，需要将静态文件拷贝到dist下，使用Copy插件\n（4）进度：构建如果需要，进度条使用webpackBar插件\n（5）检查ts: 如果项目中有使用ts还可以用ts检查的插件\n（6）二次编译：如果希望提升二次编译速度可以使用 HardSouce插件\nresolve: 对js/jsx等文件进行解析")])]),e._v(" "),n("li",[n("p",[e._v("开发配置\nmode: development。表示开发模式\ndevtool: 'eval-source-map'。 开发工具，在控制台中会输出报错的文件已经行数，有助于提高开发效率。\ndevServer: {} 进行相关配置后，可以开启本地服务，配置后可以进行热更新、服务代理。\noptimization:{splitChunks:{chunk:'all'}}：将第三方插件从主包中剥离出去")])]),e._v(" "),n("li",[n("p",[e._v("mode: production 表示生产模式\ndevtool: none 生产模式不需要source-map功能，可以关闭\nplugins:\n(1) 压缩CSS\n（2）移除未用的css\noptimization: 压缩js/将CSS分离出主包\nsplitChunks: {chunk:'all'}：将第三方插件从主包中剥离出去")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);