(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{238:function(t,e,v){"use strict";v.r(e);var a=v(6),_=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[t._v("#")]),t._v(" 框架")]),t._v(" "),e("h2",{attrs:{id:"vue2-和-react的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue2-和-react的区别"}},[t._v("#")]),t._v(" vue2 和 react的区别")]),t._v(" "),e("ol",[e("li",[t._v("Vue 使用的是 web 开发者更熟悉的模板与特性，比如单文件组件是以HTML模板+CSS+JS的组合形式以及约定好的命令，以及封装了许多常用的功能，比如路由守卫，keep-alive，这样使得新入门的前端工程师更加容易接受Vue。")])]),t._v(" "),e("p",[t._v("而React的特色在于函数式编程的理念与丰富的技术选型。")]),t._v(" "),e("p",[t._v("相对来说，React更适合入门多年的前端工程师，因为在写法上没有像Vue那样的约定式的命令，如果需要什么功能，就自己去实现。\n对于入门多年的前端来说，React可能更加得心应手。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("实现上，vue和react最大的区别在于数据的响应上。vue提供了响应式的数据，当数据改动时，数据本身会把这个改动推送出去，告知渲染系统自动更新，而react需要通过setState，给系统一个明确的信号说明现在要开始重新渲染了，这个系统才开始渲染，两者没有绝对优劣势。")])]),t._v(" "),e("h2",{attrs:{id:"vue面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue面试题"}},[t._v("#")]),t._v(" vue面试题")]),t._v(" "),e("p",[t._v("生命周期、nextick、v-if 和 v-for、组件通信")]),t._v(" "),e("h3",{attrs:{id:"mvvm原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm原理"}},[t._v("#")]),t._v(" mvvm原理")]),t._v(" "),e("ul",[e("li",[t._v("通过Object.defineProperty的get和set进行数据劫持")]),t._v(" "),e("li",[t._v("通过正则找到模板中的"),e("code",[t._v("{{}}")]),t._v("，替换"),e("code",[t._v("{{}}")]),t._v("中间的值，对数据进行编译")]),t._v(" "),e("li",[t._v("通过发布订阅模式实现数据与视图同步")]),t._v(" "),e("li",[t._v("双向绑定：（1）取到模板中的v-model值，（2）通过发布订阅模式监听数据变化并同步视图，将数据添加输入框中，（3）接着通过addEventListen监听输入框的变化，值设置成输入的值.")])]),t._v(" "),e("h2",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),e("p",[t._v("react面试题")]),t._v(" "),e("h3",{attrs:{id:"react的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react的生命周期"}},[t._v("#")]),t._v(" React的生命周期")]),t._v(" "),e("p",[t._v("挂载：")]),t._v(" "),e("p",[t._v("constructor: 初始化state、为处理事件绑定this\nstatic getderivedStateFromProps：如果state的值都取决于Props，可以用这个钩子\nrender: 渲染函数，返回需要渲染的东西，可以是DOM、React组件等等\nDidmount: 挂载后立即执行，可以在此钩子发起网络请求、添加订阅")]),t._v(" "),e("p",[t._v("更新：")]),t._v(" "),e("p",[t._v("static getderivedStateFromProps\nshouldComponentUpdate: 有两个参数nextProps和NextStates，表示新的属性和变化之后的props和state，返回一个布尔值默认为true，true表示重新渲染，false表示不渲染，可以通过此钩子做性能优化。\nrender\nbeforUpdate: 两个参数prevProps，prevState，这个钩子有一个返回值，会传给didUpdate的第三个参数，必须搭配Didupdate使用。\n如果触发某些回调函数时需要用到 DOM 元素的状态，则将对比或计算的过程放在此钩子， componentDidUpdate 中统一触发回调或更新状态。")]),t._v(" "),e("p",[t._v("DidUpdate: 三个参数prevProps，prevState，snapshot，表示之前的Props、state、以及beforUpdate传递过来的值，更新后立即执行，可以用于对比更新前后的state来判断是否进行后面的操作")]),t._v(" "),e("p",[t._v("卸载：")]),t._v(" "),e("p",[t._v("willUnmount: 卸载前执行，必须在此钩子中清除定时器、取消网络请求、或者清除在Didmount中添加的订阅。")]),t._v(" "),e("h3",{attrs:{id:"react的请求应该放在哪个生命周期中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react的请求应该放在哪个生命周期中"}},[t._v("#")]),t._v(" React的请求应该放在哪个生命周期中?")]),t._v(" "),e("p",[t._v("放在DidMount或者有条件判断的DidUpdate中，\n放在WillMount会有可能导致多次调用的问题。")]),t._v(" "),e("h3",{attrs:{id:"react-中的-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-中的-key"}},[t._v("#")]),t._v(" React 中的 key")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("key 是 react 在渲染一系列相同类型的兄弟元素时，给每个元素指定一个唯一的值，来帮助 React 识别哪些元素改变了。")])]),t._v(" "),e("li",[e("p",[t._v("避免在某些场景下，元素的错误渲染，比如添加和删除。")])]),t._v(" "),e("li",[e("p",[t._v("提升 React 的渲染性能：在使用 diff 算法对比 react 更新前后两棵树的比较时，使得树的转换效率得以提高，组件实例基于它们的 key 来决定是否更新以及复用。")])])]),t._v(" "),e("h3",{attrs:{id:"setstate到底是异步还是同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate到底是异步还是同步"}},[t._v("#")]),t._v(" setState到底是异步还是同步?")]),t._v(" "),e("p",[t._v("先给出答案: 有时表现出异步,有时表现出同步")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("setState只在"),e("strong",[t._v("合成事件")]),t._v("和"),e("strong",[t._v("钩子函数")]),t._v("中为异步的，在"),e("strong",[t._v("原生事件")]),t._v("和"),e("strong",[t._v("setTimeout")]),t._v("中是同步的。")])]),t._v(" "),e("li",[e("p",[t._v("setState 中的异步不是说，内部由异步代码实现，而是合成事件和钩子函数的调用都在更新之前。")])])]),t._v(" "),e("h3",{attrs:{id:"组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("父组件向子组件传递：props")])]),t._v(" "),e("li",[e("p",[t._v("子组件向父组件传递：在父组件中定义一个回调函数，在通过props将该函数传递给子组件，子组件就可以通过调用该函数将信息传递给父组件。")])]),t._v(" "),e("li",[e("p",[t._v("同级组件之间的信息传递：通过状态提升")])]),t._v(" "),e("li",[e("p",[t._v("跨层级传递信息：使用状态管理库、context、可以自定义事件（发布订阅者模式）")])])]),t._v(" "),e("h3",{attrs:{id:"你是如何理解react-fiber的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你是如何理解react-fiber的"}},[t._v("#")]),t._v(" 你是如何理解React-fiber的?")]),t._v(" "),e("p",[t._v("fiber 产生的背景")]),t._v(" "),e("ul",[e("li",[t._v("react 16.0之前渲染过程会递归比对 VirtualDOM 树，并且更新是同步的，如果要更新一个庞大的组件，那么js占据主线程时间过长，会导致页面响应速度变差，使得react在动画、手势等应用中表现的较差。")])]),t._v(" "),e("p",[t._v("为了解决这一问题出现了React 通过Fiber 架构，让更新渲染过程变的可切断，适当的让出CPU执行权，这样做可以让浏览器及时响应用户的操作")]),t._v(" "),e("p",[t._v("Fiber树：react在render函数调用时，生成了一个Elemnt树，可以称之为虚拟DOM树，由于要记录上下文信息，加入到了Firbe中，每个Elemnt 都有对于的Firbe Node。")]),t._v(" "),e("p",[t._v("将fiber Node链接起来就成了Fiber Tree。")]),t._v(" "),e("p",[t._v("Fiber Tree的特点是链表结构循环遍历然后配合requestIdleCallback 实现任务拆分、终端恢复。")]),t._v(" "),e("h3",{attrs:{id:"react的hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react的hooks"}},[t._v("#")]),t._v(" React的hooks")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("useState\n相当于 class组件中的 this.setState()")])]),t._v(" "),e("li",[e("p",[t._v("useEffect")])])]),t._v(" "),e("p",[t._v("Effect Hook 执行副作用操作, 还可以进行清除订阅")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("useReducer")])]),t._v(" "),e("p",[t._v("useState的替换方案，例如用于处理 state 逻辑较复杂且包含多个子值、下一个 state 依赖于之前的 state等")]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("useContext")])]),t._v(" "),e("p",[t._v("useContext(MyContext)相等于 class组件中的 <MyContext.Consumer>，用于读取context的值和订阅context的变化")]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("useMemo")])]),t._v(" "),e("p",[t._v("用于优化高开销的计算优化")]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("useRef")])]),t._v(" "),e("p",[t._v("配合ref使用，用于获取元素DOM属性")]),t._v(" "),e("h3",{attrs:{id:"是否了解-diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是否了解-diff算法"}},[t._v("#")]),t._v(" 是否了解 diff算法")]),t._v(" "),e("p",[t._v("diff算法")]),t._v(" "),e("p",[t._v("当对比两个元素的时候，React首先对比两棵树的根元素。不同情况有不用的形态。")]),t._v(" "),e("p",[t._v("第一种，当两个根元素的类型不同的时候，react会卸载原有的数并建立新的树。")]),t._v(" "),e("p",[t._v("第二种，当两个根元素的类型相同时，react仅对比及更新属性。")]),t._v(" "),e("p",[t._v("第三种，当对比两个组件元素的时候，组件实例会保持不变，只会更新Props属性来保证与最新的元素保持一致。")]),t._v(" "),e("p",[t._v("第四种，当元素下面有多个类似的元素时，比如li。那么在添加时，如果向头部插入会比在尾部插入开销来的大，引入在头部插入\nReact意识不到元素的变化，只会重新构建每一个元素。")]),t._v(" "),e("p",[t._v("为了解决这个问题React引入了key属性，假如给每一个li加入key之后，再向头部加入一个新的li，那么React可以根据key能够知道原来的元素可以复用\n只是移动了而已。key的值可以是数组下标，这在不重新排序的情况下是适合的，否则就会使diff变慢。")]),t._v(" "),e("h3",{attrs:{id:"虚拟-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom"}},[t._v("#")]),t._v(" 虚拟 dom")]),t._v(" "),e("ol",[e("li",[t._v("定义")])]),t._v(" "),e("p",[t._v("虚拟DOM是一种 DOM节点 的抽象数据结构。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("作用")])]),t._v(" "),e("p",[t._v("比起使用虚拟DOM后更新真实DOM，直接浏览器操作DOM的代表更加昂贵，频繁操作DOM会产生性能问题。")]),t._v(" "),e("p",[t._v("虚拟DOM是根据每一次响应式数据引起的变化，去对比前后的虚拟DOM，匹配出需要更新的节点，再去让真实的DOM更新。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("实现原理")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("用js对象模拟真实DOM，对真实DOM进行抽象。")])]),t._v(" "),e("li",[e("p",[t._v("diff算法 —— 比较两颗虚拟DOM数的差异")])]),t._v(" "),e("li",[e("p",[t._v("patch算法 —— 将两颗虚拟DOM对比的结果应用到真正的树。")])])]),t._v(" "),e("h3",{attrs:{id:"react-合成事件机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-合成事件机制"}},[t._v("#")]),t._v(" React 合成事件机制")]),t._v(" "),e("ol",[e("li",[t._v("含义")])]),t._v(" "),e("p",[t._v("React 中有自己的事件系统模式，通常被称为 React 合成事件。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("作用")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("为了抹平事件在不同平台体现出来的差异性，这使得 React 开发者不需要自己再去关注浏览器事件兼容性问题；")])]),t._v(" "),e("li",[e("p",[t._v("为了统一管理事件，提高性能。")])])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("原理")])]),t._v(" "),e("p",[t._v("不会把事件处理机制直接绑在真实节点上，而是把事件绑定在document，使用一个统一的事件监听器。")]),t._v(" "),e("p",[t._v("当事件挂在或者卸载时，只是在这个统一的事件监听器上插入或删除；")]),t._v(" "),e("p",[t._v("当事件发生时，首先被这个统一的事件监听器处理，然后通过事件映射表找到真实的处理函数来执行。")]),t._v(" "),e("p",[t._v("这样做简化了事件处理和回收机制。")]),t._v(" "),e("h3",{attrs:{id:"react-性能优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-性能优化方案"}},[t._v("#")]),t._v(" React 性能优化方案")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("减少不必要渲染，如用 shouldComponentUpdate、PureComponent、React.memo 实现")])]),t._v(" "),e("li",[e("p",[t._v("数据缓存")]),t._v(" "),e("ul",[e("li",[t._v("useMemo 缓存参数、useCallback 缓存函数")]),t._v(" "),e("li",[t._v("函数、对象尽量不要使用内联形式(如 context 的 value object、refs function)")]),t._v(" "),e("li",[t._v("Route 中的内联函数渲染时候使用 render 或者 children，不要使用 component， 当你用 component 的时候，Router 会用指定的组件和 React.createElement 创建一个新 的[React elment]。这意味着当你提供的是一个内联函数的时候，每次创建 render 都会创建一个新的组件。这会导致不再更新已经现有组件，⽽是直接卸载然后再去挂载⼀个新的 组件。因此，当⽤到内联函数的内联渲染时，请使⽤render 或者 children。")])])]),t._v(" "),e("li",[e("p",[t._v("懒加载，对于长页表分页加载")])]),t._v(" "),e("li",[e("p",[t._v("减少 http 请求")])])]),t._v(" "),e("h3",{attrs:{id:"高阶组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件"}},[t._v("#")]),t._v(" 高阶组件")]),t._v(" "),e("ol",[e("li",[t._v("含义")])]),t._v(" "),e("p",[t._v("高阶组件是参数为组件，返回值为新组件的函数")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("作用")])]),t._v(" "),e("p",[t._v("我们需要一个抽象，允许我们在一个地方定义这个逻辑，并在许多组件之间共享它。这正是高阶组件擅长的地方。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("注意事项")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("不要改变原始组件，使用组合的方式。")])]),t._v(" "),e("li",[e("p",[t._v("在HOC中将不相关的props, 传入新的组件")])]),t._v(" "),e("li",[e("p",[t._v("HOC，不仅只有一个参数：组件，也可以传入别的参数")])]),t._v(" "),e("li",[e("p",[t._v("HOC包装时，显示组件名称，便于调试。")])]),t._v(" "),e("li",[e("p",[t._v("不要在render中使用HOC")])]),t._v(" "),e("li",[e("p",[t._v("HOC包装时，务必复制静态方法")])]),t._v(" "),e("li",[e("p",[t._v("Refs 不会被传递，这个问题的解决方案是通过使用 React.forwardRef")])])]),t._v(" "),e("h3",{attrs:{id:"react-purecomponent的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-purecomponent的作用"}},[t._v("#")]),t._v(" React.PureComponent的作用")]),t._v(" "),e("p",[t._v("当组件的props或state改变时，React.PureComponent能够自动执行shouldComponentUpdate，去进行浅比较，浅比较只能对比基本类型的数据\n无法对比引用类型的数据。所以React.PureComponent比较适合用于纯组件或者Props或state为基本类型的组件。")]),t._v(" "),e("h3",{attrs:{id:"context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("何时使用Context: 当组件树需要一个共享的“全局”数据时使用，使用场景例如：全局主题、全局语言")])]),t._v(" "),e("li",[e("p",[t._v("API")])])]),t._v(" "),e("ul",[e("li",[t._v("React.createContext: 创建一个context")]),t._v(" "),e("li",[t._v("Class.contextType: 挂载在class上的属性，可以用创建的React.createContext()赋值，然后在组件中通过this.context来获取最近的context的值")]),t._v(" "),e("li",[t._v("Context.Consumer： 在Context.Consumer中放一个函数组件，在将context值传递给函数组件")])]),t._v(" "),e("h3",{attrs:{id:"react-router的路由有几种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router的路由有几种模式"}},[t._v("#")]),t._v(" React-Router的路由有几种模式？")]),t._v(" "),e("p",[t._v("HashRouter: 带#\nBrowserRouter:  不带#，美观，上线后需要后端处理.")])])}),[],!1,null,null,null);e.default=_.exports}}]);